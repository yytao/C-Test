#include <iostream>
using namespace std;

//函数

/**
 * 函数声明
 * 函数声明会告诉编译器函数名称以及如何调用函数。函数的实际定义可以单独定义。
 * 形参列表可省略变量名，只写形参的数据类型
 * 
 * 当在一个源文件中定义函数且在另一个文件中调用函数时，函数声明时必需的。这种情况下，应该在调用函数的文件顶部声明函数
 * 
 * 
 */
int sum(int, int);

void pointer(int *);

void quote(int &);

/**
 * 函数参数默认值在函数声明时写，函数的具体定义可以不用重复写
 * 调用函数时，实际参数的值留空，则使用默认值，否则将使用实际参数的值
 * 参数默认值设置从右到左设置，不可以隔一个变量设置默认值
 * 例如int defaultParam(int a = 1, int b, int c = 1);声明就是错误的
 * 
 */
int defaultParam(int a, int b = 1, int c = 1);

int main()
{
    /**
     * 函数
     * 函数是一组一起执行一个任务的语句。每个C++程序都至少有一个函数，即主函数main()，所有简单的程序都可以定义其他额外的函数
     * 逻辑上，划分代码通常是根据每个函数执行一个特定的任务来进行的。
     * 函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。
     * 函数还有很多叫法：比如方法、子程序、程序等等
     * 
     * return_type function_name( parameter list )
     * {
     *      body of the function
     * }
     * 函数的组成部分：
     * 1、返回类型：return_type是函数返回的值的数据类型，有些函数没有返回值，这种情况下return_type的类型是void
     * 2、函数名称：这是函数的实际名称，函数名与参数列表构成了函数签名，也就是前置声明
     * 3、参数：参数就像是占位符。当函数被调用时，向参数传递一个值，这个值被称为实际参数。参数列表包含参数的的类型 、顺序、数量。参数是可选的
     * 4、函数主体：函数主体包含一组定义函数执行任务的语句。
     * 
     * 
     */

    double sumNumber;
    /**
     * 函数调用
     * 当程序调用函数时，程序控制权会转移给被调用的函数。当函数的返回语句执行时，或到达函数的结束括号时，会把程序控制权交还给主程序
     * 调用函数时，传递所需参数，如果函数有返回值，可以存储返回值，如下列代码
     */
    //传值调用
    int a = 3;
    int b = 4;
    sumNumber = sum(a, b);
    cout << sumNumber << endl;

    //指针调用
    int c = 10;
    pointer(&c);
    cout << c << endl;

    //引用调用
    int d = 10;
    quote(d);
    cout << d << endl;

    //参数的默认值
    int e = defaultParam(3);
    cout << e << endl;
}

//函数定义==实际主体
/**
 * 函数参数
 * 如果函数需要使用参数，则必须声明接受参数值的变量。这些变量称为函数的形式参数
 * 形式参数就像函数的其他局部变量，在进入函数时创建，退出函数时销毁
 * 1、传值调用：把实际值赋值给函数的形式参数
 * 2、指针调用：把参数的地址赋值给形式参数，修改形参会影响到实参
 * 3、引用调用：把参数的引用赋值给形式参数，修改形参会影响到实参
 * 
 */

int sum(int a, int b) //传值调用
{
    return a + b;
}

void pointer(int *c) //指针调用
{
    *c = 20;
}

void quote(int &d) //引用调用
{
    d = 30;
}

int defaultParam(int a, int b, int c)
{
    return a * b;
}