#include <iostream>
using namespace std;

int main()
{

    /**
     * 一、C++指针
     * 每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号&运算符访问的地址，它表示了在内存中的一个地址。
     * 
     * 动态内存分配时，没有指针是无法执行的。
     * 
     * 指针是一个变量，其值为另一个变量的地址，即内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。
     * 
     * type *var-name;
     * 在这里，type是指针的基本类型，它必须是一个有效的C++数据类型，var-name是指针变量的名称。用来声明指针的星号*与乘法中使用的星号是相同的。
     * 但是，在这个语句中，星号是用来指定一个变量是指针。
     * 例如：int *ptr;
     * 
     * 所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。
     * 不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。
     * 
     * 通过一元运算符*来返回位于操作数所指定地址的变量地址。
     * 
     * 
     * 
     * 
     */

    int a = 10;
    int b = 20;

    int *ptr = &a;
    cout << "ptr" << ptr << endl;   //此时没有加*号运算符，则输出存储&a。
    cout << "*ptr:" <<*ptr << endl;   //此时输出，则输出指向到变量a地址的值
    *ptr = b;   //给指向到变量a地址重新赋值，则a变量也会改变
    cout << "a:" <<a << endl;




}